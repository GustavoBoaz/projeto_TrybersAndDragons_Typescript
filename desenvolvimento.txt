@isquicha ------------------------------
simpleFighter (interface):
    - lifePoints
    - strength
    - defense
Archetype (classe):
    - energy
    - special
fighter (interface estende simpleFighter, aplicando princípio I):
    - agility
Race (classe implementa fighter):
    - 
Monster (classe implementa simpleFighter):
    -
Character (classe implementa fighter):
    - arquétipo
    - raça

batalha:
    Teste do princípio D, O:
        --- antes ---
        pve(c: Character) {
            const m = new Monster()
            this.fight(c, m)
        }
        pvp(c: Character) {
            const n = new Character()
            this.fight(c, n)
        } 
        --- depois da injeção ---
        pve(c: Character, m: Monster) {
            this.fight(c, m)
        }
        pvp(c: Character, n: Character) {
            this.fight(c, n)
        }

        --- depois da inversão ---
        fight(c: Fighter, n: simpleFighter) {}
        pvp = this.fight
        pve = this.fight

@natanaelneto ------------------------------
fighter (interface):
    - lifePoints
    - strength
    - defense
    - attack()
    - receiveDamage()
Archetype (classe):
    - energy
race (classe não implementa nada):
    - name (o da raça, não do personagem)
    - maxLifePoints
    - agility
Character (classe implementa fighter):
    - Archetype
    - race
    - level (se pá a gente apaga)
Monster (classe implementa fighter):
    - NADA

battle:
    Teste do princípio D:
        --- antes ---
        entrar na dungeon(c: Character) {
            const m = new Monster()
            this.fight(c, m)
        }
        --- depois da injeção ---
        entrar na dungeon(c: Character, m: Monster) {
            this.fight(c, m)
        }
        --- depois da inversão ---
        entrar na dungeon(c: Fighter, m: Fighter) {
            this.fight(c, m)
        }

@thayscosta3 ------------------------------
fighter (interface):
    - defense
    - attack()
    - receiveDamage()
Archetype (classe):
    - energy
    - special() (não sei se é um método ou objeto)
race (classe):
    - name (o da raça, não do personagem)
    - maxLifePoints
    - lifePoints
    - strength
    - agility
Character (classe):
    - Archetype
    - race
    - level (se pá a gente apaga)
Monster (classe estende raça e implementa fighter):
    - NADA
item (classe):
weapon(classe estende item):
amulet(classe estende item):
magicalItem(classe estende item):
battle:
    segregação de interface:

    Teste do princípio D:
        --- antes ---
        entrar na dungeon(c: Character) {
            const m = new Monster()
            this.fight(c, m)
        }
        --- depois da injeção ---
        entrar na dungeon(c: Character, m: Monster) {
            this.fight(c, m)
        }
        --- depois da inversão ---
        entrar na dungeon(c: Fighter, m: Fighter) {
            this.fight(c, m)
        }


